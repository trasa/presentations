#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqConcurrency
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="LinqConcurrencyTest")]
	public partial class SearchResultsContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSearchResult(SearchResult instance);
    partial void UpdateSearchResult(SearchResult instance);
    partial void DeleteSearchResult(SearchResult instance);
    #endregion
		
		public SearchResultsContext() : 
				base(global::LinqConcurrency.Properties.Settings.Default.LinqConcurrencyTestConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SearchResultsContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SearchResultsContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SearchResultsContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SearchResultsContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SearchResult> SearchResults
		{
			get
			{
				return this.GetTable<SearchResult>();
			}
		}
	}
	
	[Table(Name="dbo.SearchResults")]
	public partial class SearchResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultId;
		
		private string _ResultName;
		
		private int _ResultCategoryID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultIdChanging(int value);
    partial void OnResultIdChanged();
    partial void OnResultNameChanging(string value);
    partial void OnResultNameChanged();
    partial void OnResultCategoryIDChanging(int value);
    partial void OnResultCategoryIDChanged();
    #endregion
		
		public SearchResult()
		{
			OnCreated();
		}
		
		[Column(Storage="_ResultId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultId
		{
			get
			{
				return this._ResultId;
			}
			set
			{
				if ((this._ResultId != value))
				{
					this.OnResultIdChanging(value);
					this.SendPropertyChanging();
					this._ResultId = value;
					this.SendPropertyChanged("ResultId");
					this.OnResultIdChanged();
				}
			}
		}
		
		[Column(Storage="_ResultName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ResultName
		{
			get
			{
				return this._ResultName;
			}
			set
			{
				if ((this._ResultName != value))
				{
					this.OnResultNameChanging(value);
					this.SendPropertyChanging();
					this._ResultName = value;
					this.SendPropertyChanged("ResultName");
					this.OnResultNameChanged();
				}
			}
		}
		
		[Column(Storage="_ResultCategoryID", DbType="Int NOT NULL")]
		public int ResultCategoryID
		{
			get
			{
				return this._ResultCategoryID;
			}
			set
			{
				if ((this._ResultCategoryID != value))
				{
					this.OnResultCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ResultCategoryID = value;
					this.SendPropertyChanged("ResultCategoryID");
					this.OnResultCategoryIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
