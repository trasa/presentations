using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Blackfin.SpringHelper;

namespace MissileCommand.Core
{
    /// <summary>
    /// The Ultra-Secret, Ultra-Complicated Targeting Solutions System.
    /// </summary>
    /// <remarks>
    /// This is what figures out, given a launch site, and the weapons at that site,
    /// and a target at a certain position in the sky, traveling at a certain speed, altitude,
    /// and orientation, how to shoot that POS down.
    /// </remarks>
    public class TargetingSystem : ITargetingSystem
    {
        private readonly Satellite target;
        private readonly LaunchSite launcher;
        private readonly DateTime launchTime;

        private const double LaunchThreshold = 0.75;
        
        // TEST
        private const string VectorFileName = "C:/FiringSolution_Mainframe_Info.txt";



        public TargetingSystem(Satellite target, LaunchSite launcher, DateTime launchTime)
        {
            this.target = target;
            this.launcher = launcher;
            this.launchTime = launchTime;
        }

        /// <summary>
        /// Determines whether our target will be in range at this time.
        /// </summary>
        /// <returns>
        /// 	<c>true</c> if we can hit it; otherwise, <c>false</c>.
        /// </returns>
        public bool IsInRange
        {
            #region *** ATTENTION: CLASSIFIED INFORMATION FOLLOWS - UNAUTHORIZED ACCESS PROHIBITED
            get
            {
                if (target.Altitude > launcher.MaxAltitude)
                {
                    return false;
                }
                else
                {
                    Random r = new Random(target.GetHashCode() + launcher.GetHashCode() + launchTime.Millisecond);
                    double percent = r.NextDouble();
                    return percent < LaunchThreshold;
                }
            }

            #endregion
        }

        /// <summary>
        /// Gets the geographic bias.
        /// </summary>
        /// <value>The geographic bias.</value>
        public double GeographicBias
        {
            get
            {
                #region *** MORE CLASSIFIED IMPLEMENTATION...
                return new Random().Next();
                #endregion
            }
        }

        /// <summary>
        /// Determine an appropriate firing solution to blow this target up
        /// </summary>
        /// <returns></returns>
        public FiringSolution ComputeFiringSolution()
        {
            FiringSolution current = new FiringSolution(this);

            // TEST
            // to compute a solution, first we have to access data written from the
            // ACHES-7529-MUX superprocessing mainframe - the only way we get
            // this information is by reading in a text file on the disk.
            // because of the way the software that accesses the mainframe works, the only
            // place this file can be written is C:\FiringSolution_Mainframe_Info.txt
            IList<double> precomputedVectors = ReadVectors();
            foreach(double d in precomputedVectors)
            {
                current = current.ReticulateSplines(d);
            }
            return current;
        }


        /// <summary>
        /// Reads the vectors generated by the mainframe.
        /// </summary>
        /// <remarks>
        /// For this example, this is just a small text file - 
        /// but lets assume that this text file could actually be HUGE, and updated with
        /// enough frequency that we can't simply store the result.
        /// </remarks>
        /// <returns></returns>
        private static IList<double> ReadVectors()
        {
            // TEST: this represents a dependency on the file system
            // does this class really belong in TargetingSystem?  

            if (!File.Exists(VectorFileName))
            {
                throw new DemoException("Couldn't find the pseudo-mainframe info file " + VectorFileName + ", did you forget to copy it?");
            }
            List<double> result = new List<double>();
            using (StreamReader sr = new StreamReader(File.OpenRead(VectorFileName)))
            {
                while (!sr.EndOfStream)
                {
                    // typically you'd check to make sure that the parse succeeds, or does something informative if the parse fails...
                    result.Add(double.Parse(sr.ReadLine()));
                }
            }
            return result;

            #region Test
            //return Factory<IVectorProvider>.Create().GetTargetingVectors();
            #endregion
        }
    }
}
